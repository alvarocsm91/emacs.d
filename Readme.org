* Introducción
# Comandos org para la exportación como *.pdf de este archivo.
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Readme
#+date: \today
#+author: Álvaro Cortés Sánchez-Migallón
#+email: alvarocsm.91@gmail.com
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.0.50 (Org mode 9.3.6)
#+latex_class: article
#+latex_class_options:
#+latex_header:
#+latex_header_extra:
#+description:
#+keywords:
#+subtitle:
#+latex_compiler: pdflatex

  Este documento es la guia para poder configurar emacs con mi propia
  configuración, yo lo utilizo por ahora en mi ordenador sobre Fedora 31. La
  versión que utilizo de emacs es la actual, intentando tener la última que
  suele solucionar los errores detectados. Emacs 28.0.50 (Org mode 9.3.6)

  Desde este archivo se pueden exportar los fragmentos de código para generar el
  script que leerá Emacs para realizar la configuración, este archivo es
  /init.el/ y se añade en el repositorio.

* Configuración básica

  En este apartado de configuran elementos básicos del sistema, sirve de ayuda
  para poder realizar la lectura de variables de entorno del sistema o cargar
  hasta el inicio de los repositorios donde se encuentran los paquetes que
  posteriormente descargaremos para su uso.

  Para poder realizar la localización de distintos archivos se genera la
  variable que apunte a la raíz del sistema, para ello se extrae el valor de la
  variable de entorno /HOME/.

  #+begin_src lisp :tangle init.el
    ;;; Basic setup
    ;;;; Home directory
    (setq MyHomeDir (getenv "HOME"))
  #+end_src

  Para la conexión a Internet desde detrás de un proxy se prueba a ver si se
  tiene un fichero de configuración del proxy, mostrado a continuación.

  #+begin_src lisp :tangle init.el
    ;;;; Proxy
    (when (file-exists-p (format "%s/.emacs.d/proxy.el" MyHomeDir))
      (load-file (format "%s/.emacs.d/proxy.el" MyHomeDir)))
  #+end_src

  Para poder hacer uso de los ditintos paquetes es necesario cargar los
  repositorios se utilizarán los paquetes de melpa, basado en paquetes no
  oficiales soportados en git para el control de sus versiones. Se define la
  carpeta de carga dentro de la carpeta /.emacs.d/, se descararán las últimas
  versiones, por último se cargan los repositorios y se refrescan los contenidos.

  #+begin_src lisp :tangle init.el
    ;;;; Repositories
    (require 'package)
    (setq package-user-dir (format "%s/.emacs.d/elpa" MyHomeDir))

    (setq load-prefer-newer t
          package-enable-at-startup t)

    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

    (package-initialize)
    (package-refresh-contents)
  #+end_src

* Instalación de paquetes

  Una de las grandes ventajas que tiene emacs es que se pueden añadir fácilmente
  distintos paquetes y con ello funcionalidades que permiten hacer tu vida más
  facil a la hora de conseguir tus metas.

  Para la instalación de paquetes es recomendable utilizar la función
  /use-package/ que permite realizar una auto carga de la última actualización
  de los distintos paquetes que se utilicen en el sistema, descargandolos y
  compilandolos para poder ser utilizados.

  #+begin_src lisp :tangle init.el
    ;;; Package usage
    ;;;; Use Package
    (package-install 'use-package t)
    (setq use-package-always-defer t
          use-package-always-ensure t)
  #+end_src

  También se puede utilizar el comando /require/ para las mismas funciones.

  Para más información [[https://github.com/jwiegley/use-package][use-package]].

** Hydra

   El paquete de hydra es muy importante en esta configuración ya que premite
   acortar los comandos para llamar funciones, al utilizar muchos y muy diversos
   paquete, permite crear combinaciones de comandos.

   #+begin_src lisp :tangle init.el
     ;;;; Hydra
     (use-package hydra
       :defer t)
   #+end_src

   Para más información [[https://github.com/abo-abo/hydra][hydra]].

** Org

   Org es uno de los modos de trabajo más importantes de emacs, ya que permite
   muchisimas cosas entre ellas trabajar de forma organizada, generando
   documentos con código para exportar a partir de software libre como emacs
   dejando los documentos elegantes y comprensibles. Se tuiliza también para la
   gestión de tareas por llevar a cabo y es muy utilizado gracias a la mezcla de
   sus funcionalidades con otros paquetes.

   #+begin_src lisp :tangle init.el
     ;;;; Org mode
     (use-package org
       :ensure org-plus-contrib
       :config
       (setq org-return-follows-link t)
       :hook (org-mode . (lambda ()
                           (aggressive-fill-paragraph-mode t)))
       :bind
       (("C-x L" . org-store-link)		;; global
        ("C-x C-l" . org-insert-link-global) ;; global
        :map org-mode-map
        ("C-x C-l" . org-insert-link)))
   #+end_src

   Para la gestión de tareas se han definido los siguientes estados de la tareas
   en las que las tareas empiezan como ideas para ser definidas /TBD/ pasando a
   por hacer cuando se ha generado la planificación de la misma con /TODO/. Una
   vez se han iniciado se manienen en modo /ACTIVE/ o /BLOCKED/ en función de si
   estamos trabajando o no en este mismo momento. Por último, la tarea se define
   como completa con los atributos de /DONE/ y /ARCHIVED/ para cuando las tareas
   han sido terminadas y cerradas y el atributo de DELETED por si al final se ha
   decidido no hacer, estos tres marcan la tarea como completa.

   #+begin_src lisp :tangle init.el
     ;;;;; Org tarsk state
     ;;Define pocess states
     (setq org-todo-keywords
     '((sequence "TBD" "TODO" "ACTIVE" "BLOCKED" "REVIEW" "|" "DONE" "ARCHIVED" "DELETED")))
     ;; Define process colours
     (setq org-todo-keyword-faces
           '(("TBD" .(:foreground "white" :weight bold-italic))
           ("TODO" .(:foreground "grey" :weight bold-italic))
           ("ACTIVE" .(:foreground "ligth-blue" :weight bold-italic))
           ("BLOCKED" .(:foreground "purple" :weight bold-italic))
           ("REVIEW" .(:foreground "pink" :weight bold-italic))
           ("DONE" .(:foreground "yellow" :weight bold-italic))
           ("ARCHIVED" .(:foreground "green" :weight bold-italic))
           ("DELETED" .(:foreground "black" :weight bold-italic))))
   #+end_src

   Para la exportación de documentación en latex y el uso de los colores de la
   tablera de colores de los modos de programación soportados en org se utiliza
   la herramienta /pygmentize/ que hay que instalar previamente en nuestro
   terminal.

   #+begin_src lisp :tangle init.el
     ;;;;; Org pygmentize
     (require 'org)
     (require 'ox-latex)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted)

     (setq org-latex-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

     (setq org-src-fontify-natively t)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((R . t)
        (latex . t)
        ()))
   #+end_src

   Para más información [[https://orgmode.org/][org-mode]].

** Org-link-minor-mode

   Se trata de un modo menor de emacs, permite el uso del modo org y la
   activación de sus links desde modos distintos al org, como puedan ser los
   modos de programación, es muy útil para su uso en links a documentación
   relativa desde el mismo archivo.

   Antes de utilizarlo se debe clonar el paquete de github:

   #+begin_src shell
     $ git clone https://github.com/seanohalpin/org-link-minor-mode.git
   #+end_src

   #+begin_src lisp :tangle init.el
     ;;;;; Org-link-moinor-mode
     ;; (use-package org-link-minor-mode)
     (when (file-exists-p (format "%s/.emacs.d/org-link-minor-mode/org-link-minor-mode.el" MyHomeDir))
       (load-library (format "%s/.emacs.d/org-link-minor-mode/org-link-minor-mode.el" MyHomeDir)))

     (require 'org)
     (use-package org-link-minor-mode
       :ensure t)
   #+end_src

   Para más información [[https://github.com/seanohalpin/org-link-minor-mode][org-link-minor-mode]].

** Poporg

   Poporg es un paquete que permite hacer una correcta presentación de
   fragmentos de distintos modos dobre un mismo archivo, pudiendo mantener los
   modos generales de documentación integrando fragmentos de código en ellos
   para poder extraerlos posteriormente. Sirve principalmente para comentar de
   forma cómoda un código o añadir comentarios automaticamente.

   #+begin_src lisp :tangle init.el
     ;;;;; Poporg
     (use-package poporg
       :ensure t
       :bind
       ;; call it
       (:map global-map
         (("C-c SPC" . poporg-dwim))
         ;; from within the org mode, poporg-mode-map is a minor mode
         :map poporg-mode-map
         ("C-c C-c" . poporg-update)            ;; update original
         ("C-c SPC" . poporg-edit-exit)         ;; exit, keeping changes
         ("C-x C-s" . poporg-update-and-save))  ;; update original and save buffer
       :hook (poporg-mode . (lambda ()
                  (outline-show-all)
                  (aggressive-fill-paragraph-mode t)
                  (goto-char (point-min)))))
   #+end_src

   Para más información [[https://github.com/pinard/poporg][poporg]].
